@startuml
title Turn Based RPG (1 playable character + 1 npc enemy) - UML Class Diagram

' @Enums
enum StatType {
    STRENGTH
    INTELLIGENCE
    DEXTERITY
}
enum ActionType {
    ATTACK
    ABILITY
    ITEM
    WAIT
}
enum RarityType {
    COMMON
    RARE
    LEGENDARY
}
enum StatusType {
    IDLE
    READY
    DEAD
    MISSING
}

' @Interfaces
interface Usable {
    +use(user: Characters, target: Characters): void
    +isUsable(user: Characters, target: Characters): boolean
    +cooldownRemaining(): int
    +toString(): String
}

' @Exceptions
class MaxInstancesLimitException extends RuntimeException
class InventoryFullException extends RuntimeException
class AbilityOnCooldownException extends RuntimeException

' @Characters
abstract class Characters {
    - characterId: int
    - name: String
    - description: String
    - level: int
    - hp: int
    - actionPoints: int
    - inventory: Inventory
    - abilities: List<Ability>
    - stats: Map<StatType, int>
    - status: StatusType

    +attack(target: Characters): void
    +takeDamage(amount: int): void
    +useAbility(ability: Ability, target: Characters): void throws AbilityOnCooldownException
    +startTurn(): void
    +canAct(): boolean
    +toString(): String

    +getStat(type: StatType): int
    +setStat(type: StatType, value: int): void
}
class PlayableCharacter extends Characters {
    +heal(amount: int): void
    +levelUp(): void
    +equipWeapon(weapon: Weapon): void
    +loot(items: List<Item>): void
}
class Enemy extends Characters {
    +fleeChance(): boolean
    +respawn(): void
    +dropLoot(): List<Item>
    +applyStatusEffect(target: Characters): void
}

' @Inventory, Items, Weapons, and Abilities
class Inventory {
    -slotCapacity: int
    -items: List<Item>

    +addItem(item: Item): void throws InventoryFullException
    +removeItem(itemId: int): void
    +hasSpaceFor(item: Item): boolean
    +findById(itemId: int): Item
    +totalWeight(): double
    +toString(): String
}
abstract class Item {
    -itemId: int
    -name: String
    -description: String
    -weight: double
    -rarity: RarityType
    -slotsTaken: int

    +toString(): String
}
class Weapon extends Item implements Usable {
    -minDamage: int
    -maxDamage: int
    -critChance: double
    -durability: int
    -lastUsedTurn: int
    -actionPointCost: int
    -cooldown: int

    +calculateDamage(player: Characters, target: Characters): int
    +rollCrit(player: Characters, target: Characters): boolean
    +consumeDurability(): void
    +rechargeCooldown(): void
}
class Ability implements Usable {
    -abilityId: int
    -name: String
    -lastUsedTurn: int
    -power: int
    -scalingStat: StatType
    -actionPointCost: int
    -cooldown: int

    +spendActionPoints(user: Characters): int
    +putOnCooldown(): void
    +scalingValue(user: Characters): int
    +resetCooldown(): void
}

' @BattleFieldManager and TurnAction
class BattlefieldManager {
    -turnCount: int
    -turnOrder: Queue<TurnAction>

    +initCombat(player: PlayableCharacter, enemy: Enemy): void
    +currentActor(): Characters
    +nextTurn(): TurnAction
    +isBattleOver(): boolean
    +currentTurn(): int
    +winner(): String
    +toString(): String
}
class TurnAction {
    -actor: Characters
    -type: ActionType
    -payload: Object

    +toString(): String
}

' @Relationships
Characters "<color:red>1</color>" *-- "<color:red>1       </color>" Inventory
Characters "<color:red>1      </color>" o-- "<color:red>*</color>" Ability

Inventory "<color:red>  1</color>" o-- "<color:red>          0..*</color>" Item

BattlefieldManager "<color:red>1  </color>" o-- "<color:red>2 </color>" Characters
BattlefieldManager ..> TurnAction


note top of MaxInstancesLimitException
Constructors enforce cap of 100 instances per class.
end note

@enduml
